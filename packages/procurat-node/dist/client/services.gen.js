"use strict";
// This file is auto-generated by @hey-api/openapi-ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationshipsService = exports.CountriesService = exports.GroupsService = exports.DistrictsService = exports.ReligionsService = exports.PersonService = exports.AddressService = void 0;
class AddressService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Get address by id
     * Get address by id
     * @param data The data for the request.
     * @param data.id
     * @returns AddressDTO default response
     * @throws ApiError
     */
    findAddressById(data) {
        return this.httpRequest.request({
            method: "GET",
            url: "/addresses/{id}",
            path: {
                id: data.id,
            },
        });
    }
    /**
     * Get all addresses
     * Get all addresses
     * @returns AddressDTO default response
     * @throws ApiError
     */
    findAllAddresses() {
        return this.httpRequest.request({
            method: "GET",
            url: "/addresses",
        });
    }
    /**
     * Create address
     * Create address
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AddressDTO default response
     * @throws ApiError
     */
    createAddress(data = {}) {
        return this.httpRequest.request({
            method: "POST",
            url: "/addresses",
            body: data.requestBody,
            mediaType: "application/json",
        });
    }
}
exports.AddressService = AddressService;
class PersonService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Find by id
     * Find a person by id.
     * @param data The data for the request.
     * @param data.id
     * @returns PersonDTO default response
     * @throws ApiError
     */
    findPerson(data) {
        return this.httpRequest.request({
            method: "GET",
            url: "/persons/{id}",
            path: {
                id: data.id,
            },
        });
    }
    /**
     * Update
     * Update a person.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns SuccessResponse default response
     * @throws ApiError
     */
    updatePerson(data) {
        return this.httpRequest.request({
            method: "PUT",
            url: "/persons/{id}",
            path: {
                id: data.id,
            },
            body: data.requestBody,
            mediaType: "application/json",
        });
    }
    /**
     * Find all
     * Find all persons.
     * @returns PersonDTO default response
     * @throws ApiError
     */
    findAllPersons() {
        return this.httpRequest.request({
            method: "GET",
            url: "/persons",
        });
    }
    /**
     * Create
     * Create a person.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SuccessResponse default response
     * @throws ApiError
     */
    createPerson(data = {}) {
        return this.httpRequest.request({
            method: "POST",
            url: "/persons",
            body: data.requestBody,
            mediaType: "application/json",
        });
    }
}
exports.PersonService = PersonService;
class ReligionsService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Find all
     * Find all available religions
     * @returns ReligionDTO default response
     * @throws ApiError
     */
    findAllReligions() {
        return this.httpRequest.request({
            method: "GET",
            url: "/religions",
        });
    }
}
exports.ReligionsService = ReligionsService;
class DistrictsService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Get all districts
     * Get all districts
     * @returns DistrictDTO default response
     * @throws ApiError
     */
    findAllDistricts() {
        return this.httpRequest.request({
            method: "GET",
            url: "/districts",
        });
    }
}
exports.DistrictsService = DistrictsService;
class GroupsService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Find group by id
     * Find group by id
     * @param data The data for the request.
     * @param data.id
     * @returns GroupDTO default response
     * @throws ApiError
     */
    findGroupById(data) {
        return this.httpRequest.request({
            method: "GET",
            url: "/groups/{id}",
            path: {
                id: data.id,
            },
        });
    }
    /**
     * Find all groups
     * Find all groups
     * @returns GroupDTO default response
     * @throws ApiError
     */
    findAllGroups() {
        return this.httpRequest.request({
            method: "GET",
            url: "/groups",
        });
    }
    /**
     * Find group members by id
     * Find group members by id
     * @param data The data for the request.
     * @param data.id
     * @returns GroupMembershipDTO default response
     * @throws ApiError
     */
    findGroupMembersById(data) {
        return this.httpRequest.request({
            method: "GET",
            url: "/groups/{id}/members",
            path: {
                id: data.id,
            },
        });
    }
}
exports.GroupsService = GroupsService;
class CountriesService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Find all
     * Find all available countries
     * @returns CountryDTO default response
     * @throws ApiError
     */
    findAllCountries() {
        return this.httpRequest.request({
            method: "GET",
            url: "/countries",
        });
    }
}
exports.CountriesService = CountriesService;
class RelationshipsService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Get relationships for person
     * Get relationships for person
     * @param data The data for the request.
     * @param data.personId
     * @returns RelationshipDTO default response
     * @throws ApiError
     */
    findRelationshipsForPerson(data) {
        return this.httpRequest.request({
            method: "GET",
            url: "/relationships/person/{personId}",
            path: {
                personId: data.personId,
            },
        });
    }
}
exports.RelationshipsService = RelationshipsService;
