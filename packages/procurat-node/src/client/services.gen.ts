// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import type { BaseHttpRequest } from "./core/BaseHttpRequest";
import type { $OpenApiTs } from "./types.gen";

export class AddressService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Get address by id
   * Get address by id
   * @param data The data for the request.
   * @param data.id
   * @returns AddressDTO default response
   * @throws ApiError
   */
  public findAddressById(
    data: $OpenApiTs["/addresses/{id}"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/addresses/{id}"]["get"]["res"][200]> {
    return this.httpRequest.request({
      method: "GET",
      url: "/addresses/{id}",
      path: {
        id: data.id,
      },
    });
  }

  /**
   * Get all addresses
   * Get all addresses
   * @returns AddressDTO default response
   * @throws ApiError
   */
  public findAllAddresses(): CancelablePromise<
    $OpenApiTs["/addresses"]["get"]["res"][200]
  > {
    return this.httpRequest.request({
      method: "GET",
      url: "/addresses",
    });
  }

  /**
   * Create address
   * Create address
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AddressDTO default response
   * @throws ApiError
   */
  public createAddress(
    data: $OpenApiTs["/addresses"]["post"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/addresses"]["post"]["res"][200]> {
    return this.httpRequest.request({
      method: "POST",
      url: "/addresses",
      body: data.requestBody,
      mediaType: "application/json",
    });
  }
}

export class PersonService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Find by id
   * Find a person by id.
   * @param data The data for the request.
   * @param data.id
   * @returns PersonDTO default response
   * @throws ApiError
   */
  public findPerson(
    data: $OpenApiTs["/persons/{id}"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/persons/{id}"]["get"]["res"][200]> {
    return this.httpRequest.request({
      method: "GET",
      url: "/persons/{id}",
      path: {
        id: data.id,
      },
    });
  }

  /**
   * Update
   * Update a person.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns SuccessResponse default response
   * @throws ApiError
   */
  public updatePerson(
    data: $OpenApiTs["/persons/{id}"]["put"]["req"],
  ): CancelablePromise<$OpenApiTs["/persons/{id}"]["put"]["res"][200]> {
    return this.httpRequest.request({
      method: "PUT",
      url: "/persons/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Find all
   * Find all persons.
   * @returns PersonDTO default response
   * @throws ApiError
   */
  public findAllPersons(): CancelablePromise<
    $OpenApiTs["/persons"]["get"]["res"][200]
  > {
    return this.httpRequest.request({
      method: "GET",
      url: "/persons",
    });
  }

  /**
   * Create
   * Create a person.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SuccessResponse default response
   * @throws ApiError
   */
  public createPerson(
    data: $OpenApiTs["/persons"]["post"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/persons"]["post"]["res"][200]> {
    return this.httpRequest.request({
      method: "POST",
      url: "/persons",
      body: data.requestBody,
      mediaType: "application/json",
    });
  }
}

export class ReligionsService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Find all
   * Find all available religions
   * @returns ReligionDTO default response
   * @throws ApiError
   */
  public findAllReligions(): CancelablePromise<
    $OpenApiTs["/religions"]["get"]["res"][200]
  > {
    return this.httpRequest.request({
      method: "GET",
      url: "/religions",
    });
  }
}

export class DistrictsService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Get all districts
   * Get all districts
   * @returns DistrictDTO default response
   * @throws ApiError
   */
  public findAllDistricts(): CancelablePromise<
    $OpenApiTs["/districts"]["get"]["res"][200]
  > {
    return this.httpRequest.request({
      method: "GET",
      url: "/districts",
    });
  }
}

export class GroupsService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Find group by id
   * Find group by id
   * @param data The data for the request.
   * @param data.id
   * @returns GroupDTO default response
   * @throws ApiError
   */
  public findGroupById(
    data: $OpenApiTs["/groups/{id}"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/groups/{id}"]["get"]["res"][200]> {
    return this.httpRequest.request({
      method: "GET",
      url: "/groups/{id}",
      path: {
        id: data.id,
      },
    });
  }

  /**
   * Find all groups
   * Find all groups
   * @returns GroupDTO default response
   * @throws ApiError
   */
  public findAllGroups(): CancelablePromise<
    $OpenApiTs["/groups"]["get"]["res"][200]
  > {
    return this.httpRequest.request({
      method: "GET",
      url: "/groups",
    });
  }

  /**
   * Find group members by id
   * Find group members by id
   * @param data The data for the request.
   * @param data.id
   * @returns GroupMembershipDTO default response
   * @throws ApiError
   */
  public findGroupMembersById(
    data: $OpenApiTs["/groups/{id}/members"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/groups/{id}/members"]["get"]["res"][200]> {
    return this.httpRequest.request({
      method: "GET",
      url: "/groups/{id}/members",
      path: {
        id: data.id,
      },
    });
  }
}

export class CountriesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Find all
   * Find all available countries
   * @returns CountryDTO default response
   * @throws ApiError
   */
  public findAllCountries(): CancelablePromise<
    $OpenApiTs["/countries"]["get"]["res"][200]
  > {
    return this.httpRequest.request({
      method: "GET",
      url: "/countries",
    });
  }
}

export class RelationshipsService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Get relationships for person
   * Get relationships for person
   * @param data The data for the request.
   * @param data.personId
   * @returns RelationshipDTO default response
   * @throws ApiError
   */
  public findRelationshipsForPerson(
    data: $OpenApiTs["/relationships/person/{personId}"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/relationships/person/{personId}"]["get"]["res"][200]
  > {
    return this.httpRequest.request({
      method: "GET",
      url: "/relationships/person/{personId}",
      path: {
        personId: data.personId,
      },
    });
  }
}
